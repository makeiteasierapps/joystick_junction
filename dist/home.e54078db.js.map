{"mappings":"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","sources":["<anon>","js/home.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire8a3e\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire8a3e\"] = parcelRequire;\n}\n\nvar $6Uh31 = parcelRequire(\"6Uh31\");\n\nvar $ilpIi = parcelRequire(\"ilpIi\");\n\nvar $kxgSl = parcelRequire(\"kxgSl\");\nfunction $c73bcadfc547eb5a$var$getOnlineUsers() {\n    return new Promise((resolve, reject)=>{\n        const usersCol = (0, $ilpIi.collection)((0, $6Uh31.db), \"users\");\n        const q = (0, $ilpIi.query)(usersCol);\n        (0, $ilpIi.onSnapshot)(q, (querySnapshot)=>{\n            let users = [];\n            querySnapshot.forEach((doc)=>{\n                users.push(doc.data());\n            });\n            // Clear the previous list\n            document.getElementById(\"users-list\").innerHTML = \"\";\n            // Join the list and append it to the HTML element\n            users.forEach((user)=>{\n                let li = document.createElement(\"li\");\n                li.textContent = user.username;\n                if (user.online) {\n                    let span = document.createElement(\"span\");\n                    span.style.backgroundColor = \"green\";\n                    span.style.borderRadius = \"50%\";\n                    span.style.display = \"inline-block\";\n                    span.style.width = \"10px\";\n                    span.style.height = \"10px\";\n                    span.style.marginLeft = \"5px\";\n                    li.appendChild(span);\n                }\n                document.getElementById(\"users-list\").appendChild(li);\n            });\n            resolve(users); // Resolve(returns) the promise with the users array\n        }, reject); // Reject the promise if there's an error\n    });\n}\nwindow.onload = function() {\n    (0, $6Uh31.auth).onAuthStateChanged(async function(user) {\n        if (user) {\n            // User is signed in.\n            const idToken = await user.getIdToken();\n            try {\n                const response = await fetch(\"http://localhost:5000/user\", {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: idToken\n                    }\n                });\n                const data = await response.json();\n                if (data) {\n                    const username = data.username;\n                    document.getElementById(\"user-greeting\").textContent = `Hello, ${username}!`;\n                    await $c73bcadfc547eb5a$var$getOnlineUsers();\n                } else console.log(\"No such document!\");\n            } catch (error) {\n                console.error(\"Error:\", error);\n            }\n        } else // No user is signed in.\n        console.log(\"No user is signed in.\");\n    });\n};\n// Logout button\nconst $c73bcadfc547eb5a$var$logoutButton = document.getElementById(\"logout-button\");\n$c73bcadfc547eb5a$var$logoutButton.addEventListener(\"click\", (0, $kxgSl.default).logoutUser);\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const cells = document.querySelectorAll(\".cell\");\n    const status = document.getElementById(\"status\");\n    const resetButton = document.querySelector(\".reset-button\");\n    let currentPlayer = \"X\";\n    //Function to display the status of whose turn it is.\n    function updateStatus() {\n        status.textContent = `Player ${currentPlayer}'s turn`;\n    }\n    //Game reset-function\n    function handleResetClick() {\n        currentPlayer = \"X\";\n        cells.forEach((cell)=>{\n            cell.textContent = \"\";\n            cell.classList.remove(\"X\", \"O\");\n        });\n        updateStatus(); // Update the status after resetting the game\n    }\n    resetButton.addEventListener(\"click\", handleResetClick);\n    cells.forEach((cell)=>{\n        cell.addEventListener(\"click\", (e)=>{\n            // If the clicked cell is empty:\n            if (e.target.textContent == \"\") {\n                // Place the current player's mark (X or O) in the cell.\n                e.target.textContent = currentPlayer;\n                // send to firebase\n                // Check if the current move resulted in a win.\n                if (checkWinner()) setTimeout(()=>{\n                    alert(currentPlayer + \" won this round!\");\n                    location.reload(); // Reload the game.\n                }, 100);\n                else if (isTie()) setTimeout(()=>{\n                    alert(\"It's a tie!\");\n                    location.reload(); // Reload the game.\n                }, 100); // schedules a function to run after a delay ensuring that the last move is visually rendered on the screen before the alert pops up\n                else {\n                    currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\n                    updateStatus(); // Update the status after switching player\n                }\n            }\n        });\n    });\n    // Function to check if there's a winning combination on the board.\n    function checkWinner() {\n        // List of all potential winning combinations in tic-tac-toe.\n        const winCombination = [\n            [\n                0,\n                1,\n                2\n            ],\n            [\n                3,\n                4,\n                5\n            ],\n            [\n                6,\n                7,\n                8\n            ],\n            [\n                0,\n                3,\n                6\n            ],\n            [\n                1,\n                4,\n                7\n            ],\n            [\n                2,\n                5,\n                8\n            ],\n            [\n                0,\n                4,\n                8\n            ],\n            [\n                2,\n                4,\n                6\n            ]\n        ];\n        // Loop through each potential winning combination.\n        for (const combination of winCombination){\n            // If all cells in a combination have the same non-empty value, return true (indicating a win).\n            if (cells[combination[0]].textContent !== \"\" && //Checks if the first cell is not empty\n            cells[combination[0]].textContent === cells[combination[1]].textContent && // If the content of the first cell is the same as the content of the second cell in the current combination.\n            cells[combination[1]].textContent === cells[combination[2]].textContent // checks if the content of the second cell is the same as the content of the third cell in our combination.\n            ) return true;\n        }\n        return false; // If no winning combination found, return false.\n    }\n    // Function to check if all cells are filled and the game is a tie.\n    function isTie() {\n        // Check if every cell is filled (none are empty).\n        return [\n            ...cells\n        ].every((cell)=>cell.textContent !== \"\");\n    }\n    updateStatus();\n});\nlet $c73bcadfc547eb5a$var$gamesPlayed = 0;\nlet $c73bcadfc547eb5a$var$wins = 0;\nlet $c73bcadfc547eb5a$var$losses = 0;\nlet $c73bcadfc547eb5a$var$ties = 0;\nfunction $c73bcadfc547eb5a$var$updateStatistics(outcome) {\n    $c73bcadfc547eb5a$var$gamesPlayed++;\n    if (outcome === \"win\") $c73bcadfc547eb5a$var$wins++;\n    else if (outcome === \"loss\") $c73bcadfc547eb5a$var$losses++;\n    else if (outcome === \"tie\") $c73bcadfc547eb5a$var$ties++;\n    document.getElementById(\"games-played\").textContent = $c73bcadfc547eb5a$var$gamesPlayed.toString();\n    document.getElementById(\"wins\").textContent = $c73bcadfc547eb5a$var$wins.toString();\n    document.getElementById(\"losses\").textContent = $c73bcadfc547eb5a$var$losses.toString();\n    document.getElementById(\"ties\").textContent = $c73bcadfc547eb5a$var$ties.toString();\n}\nconst $c73bcadfc547eb5a$var$playNowButton = document.getElementById(\"playNowButton\");\n$c73bcadfc547eb5a$var$playNowButton.addEventListener(\"click\", function() {\n    const selectedGame = prompt(\"Which game would you like to play? (e.g. Tic Tac Toe)\");\n    if (selectedGame && selectedGame.toLowerCase() === \"tic tac toe\") // If the user chooses Tic Tac Toe, show the rules\n    alert(\"Rules for Tic Tac Toe:\\n\\nTwo players take turns marking a square. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game.\");\n    else // Handle other game choices (if any)\n    alert(\"Sorry, that game is not available at the moment.\");\n});\n\n\n//# sourceMappingURL=home.e54078db.js.map\n","import { db, auth } from './firebaseConfig.js';\nimport { collection, query, onSnapshot } from 'firebase/firestore';\nimport AuthService from './auth.js';\n\nfunction getOnlineUsers() {\n    return new Promise((resolve, reject) => {\n        const usersCol = collection(db, 'users');\n        const q = query(usersCol);\n        onSnapshot(\n            q,\n            (querySnapshot) => {\n                let users = [];\n                querySnapshot.forEach((doc) => {\n                    users.push(doc.data());\n                });\n                // Clear the previous list\n                document.getElementById('users-list').innerHTML = '';\n                // Join the list and append it to the HTML element\n                users.forEach((user) => {\n                    let li = document.createElement('li');\n                    li.textContent = user.username;\n                    if (user.online) {\n                        let span = document.createElement('span');\n                        span.style.backgroundColor = 'green';\n                        span.style.borderRadius = '50%';\n                        span.style.display = 'inline-block';\n                        span.style.width = '10px';\n                        span.style.height = '10px';\n                        span.style.marginLeft = '5px';\n                        li.appendChild(span);\n                    }\n                    document.getElementById('users-list').appendChild(li);\n                });\n                resolve(users); // Resolve(returns) the promise with the users array\n            },\n            reject\n        ); // Reject the promise if there's an error\n    });\n}\n\nwindow.onload = function () {\n    auth.onAuthStateChanged(async function (user) {\n        if (user) {\n            // User is signed in.\n            const idToken = await user.getIdToken();\n\n            try {\n                const response = await fetch('http://localhost:5000/user', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: idToken,\n                    },\n                });\n\n                const data = await response.json();\n                if (data) {\n                    const username = data.username;\n                    document.getElementById(\n                        'user-greeting'\n                    ).textContent = `Hello, ${username}!`;\n\n                    await getOnlineUsers();\n\n                } else {\n                    console.log('No such document!');\n                }\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        } else {\n            // No user is signed in.\n            console.log('No user is signed in.');\n        }\n    });\n};\n\n\n\n// Logout button\nconst logoutButton = document.getElementById('logout-button');\nlogoutButton.addEventListener('click', AuthService.logoutUser);\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const cells = document.querySelectorAll('.cell');\n    const status = document.getElementById('status');\n    const resetButton = document.querySelector('.reset-button');\n    let currentPlayer = 'X';\n\n    //Function to display the status of whose turn it is.\n    function updateStatus() {\n        status.textContent = `Player ${currentPlayer}'s turn`;\n    }\n\n    //Game reset-function\n    function handleResetClick() {\n        currentPlayer = 'X';\n        cells.forEach((cell) => {\n            cell.textContent = '';\n            cell.classList.remove('X', 'O');\n        });\n        updateStatus(); // Update the status after resetting the game\n    }\n\n    resetButton.addEventListener('click', handleResetClick);\n\n    cells.forEach((cell) => {\n        cell.addEventListener('click', (e) => {\n            // If the clicked cell is empty:\n            if (e.target.textContent == '') {\n                // Place the current player's mark (X or O) in the cell.\n                e.target.textContent = currentPlayer;\n                // send to firebase\n\n                // Check if the current move resulted in a win.\n                if (checkWinner()) {\n                    setTimeout(() => {\n                        alert(currentPlayer + ' won this round!');\n                        location.reload(); // Reload the game.\n                    }, 100);\n                }\n                // If not a win, check if the game is a tie.\n                else if (isTie()) {\n                    setTimeout(() => {\n                        alert(\"It's a tie!\");\n                        location.reload(); // Reload the game.\n                    }, 100); // schedules a function to run after a delay ensuring that the last move is visually rendered on the screen before the alert pops up\n                }\n                // If not a win and not a tie, switch to the other player.\n                else {\n                    currentPlayer = currentPlayer === 'X' ? 'O' : 'X';\n                    updateStatus(); // Update the status after switching player\n                }\n            }\n        });\n    });\n\n    // Function to check if there's a winning combination on the board.\n    function checkWinner() {\n        // List of all potential winning combinations in tic-tac-toe.\n        const winCombination = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n\n        // Loop through each potential winning combination.\n        for (const combination of winCombination) {\n            // If all cells in a combination have the same non-empty value, return true (indicating a win).\n            if (\n                cells[combination[0]].textContent !== '' && //Checks if the first cell is not empty\n                cells[combination[0]].textContent ===\n                    cells[combination[1]].textContent && // If the content of the first cell is the same as the content of the second cell in the current combination.\n                cells[combination[1]].textContent ===\n                    cells[combination[2]].textContent // checks if the content of the second cell is the same as the content of the third cell in our combination.\n            ) {\n                return true;\n            }\n        }\n        return false; // If no winning combination found, return false.\n    }\n\n    // Function to check if all cells are filled and the game is a tie.\n    function isTie() {\n        // Check if every cell is filled (none are empty).\n        return [...cells].every((cell) => cell.textContent !== '');\n    }\n\n    updateStatus();\n});\n\nlet gamesPlayed = 0;\nlet wins = 0;\nlet losses = 0;\nlet ties = 0;\n\nfunction updateStatistics(outcome) {\n    gamesPlayed++;\n    if (outcome === 'win') {\n        wins++;\n    } else if (outcome === 'loss') {\n        losses++;\n    } else if (outcome === 'tie') {\n        ties++;\n    }\n\n    document.getElementById('games-played').textContent =\n        gamesPlayed.toString();\n    document.getElementById('wins').textContent = wins.toString();\n    document.getElementById('losses').textContent = losses.toString();\n    document.getElementById('ties').textContent = ties.toString();\n}\n\nconst playNowButton = document.getElementById('playNowButton');\nplayNowButton.addEventListener('click', function () {\n    const selectedGame = prompt(\n        'Which game would you like to play? (e.g. Tic Tac Toe)'\n    );\n\n    if (selectedGame && selectedGame.toLowerCase() === 'tic tac toe') {\n        // If the user chooses Tic Tac Toe, show the rules\n        alert(\n            'Rules for Tic Tac Toe:\\n\\nTwo players take turns marking a square. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game.'\n        );\n    } else {\n        // Handle other game choices (if any)\n        alert('Sorry, that game is not available at the moment.');\n    }\n});\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$6Uh31","$ilpIi","$kxgSl","onload","auth","onAuthStateChanged","user","idToken","getIdToken","response","fetch","method","headers","Authorization","data","json","username","document","getElementById","textContent","Promise","resolve","reject","usersCol","collection","db","q","query","onSnapshot","querySnapshot","users","forEach","doc","push","innerHTML","li","createElement","online","span","style","backgroundColor","borderRadius","display","width","height","marginLeft","appendChild","console","log","error","$c73bcadfc547eb5a$var$logoutButton","addEventListener","default","logoutUser","cells","querySelectorAll","status","resetButton","querySelector","currentPlayer","updateStatus","cell","classList","remove","e","target","checkWinner","combination","setTimeout","alert","location","reload","every","$c73bcadfc547eb5a$var$playNowButton","selectedGame","prompt","toLowerCase"],"version":3,"file":"home.e54078db.js.map"}